#ifndef REFINEABLE_ANISOTROPIC_SOLID_ELEMENTS_H
#define REFINEABLE_ANISOTROPIC_SOLID_ELEMENTS_H

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
#include <oomph-lib-config.h>
#endif

#include "anisotropic_solid_elements.h"
#include "refineable_solid_elements.h"


namespace oomph
{
template<unsigned DIM>
class RefineableAnisotropicPVDEquations : public virtual AnisotropicPVDEquations<DIM>,
                                          public virtual RefineablePVDEquations<DIM>
{
public:
 RefineableAnisotropicPVDEquations() : AnisotropicPVDEquations<DIM>(),
                                       RefineablePVDEquations<DIM>()
 {
 }

 void further_build()
 {
  // Call the refineable PVD further build
  RefineablePVDEquations<DIM>::further_build();

  // Complete the further build by getting the principal vectors function pointer from father element
  RefineablePVDEquations<DIM>* cast_father_element_pt = dynamic_cast<RefineablePVDEquations<DIM>*>(this->father_element_pt());
  this->Principal_vectors_of_anisotropy_fct_pt = cast_father_element_pt->principal_vectors_of_anisotropy_fct_pt();
 }

protected:
 // Override the fill in to contain the necessary steps of including the anisotropic components
 virtual void fill_in_generic_contribution_to_residuals_pvd(Vector<double>& residuals,
                                                            DenseMatrix<double>& jacobian,
                                                            const unsigned& flag) override;
};

template<unsigned DIM, unsigned NNODE_1D>
class RefineableAnisotropicQPVDElement : public virtual RefineableQPVDElement<DIM, NNODE_1D>,
                                         public virtual RefineableAnisotropicPVDEquations<DIM, NNODE_1D>
{
public:
 RefineableAnisotropicQPVDElement()
  : RefineableQPVDElement<DIM, NNODE_1D>(),
    RefineableAnisotropicPVDEquations<DIM, NNODE_1D>()
 {}
};


// TODO
// Implement RefineableAnisotropicQPVDElement

//==============================================================
/// FaceGeometry of the 2D RefineableAnisotropicQPVDElement elements
//==============================================================
template<unsigned NNODE_1D>
class FaceGeometry<RefineableAnisotropicQPVDElement<2, NNODE_1D>>
  : public virtual SolidQElement<1, NNODE_1D>
{
public:
 // Make sure that we call the constructor of the SolidQElement
 // Only the Intel compiler seems to need this!
 FaceGeometry() : SolidQElement<1, NNODE_1D>() {}
};

//==============================================================
/// FaceGeometry of the FaceGeometry of the 2D RefineableAnisotropicQPVDElement
//==============================================================
template<unsigned NNODE_1D>
class FaceGeometry<FaceGeometry<RefineableAnisotropicQPVDElement<2, NNODE_1D>>>
  : public virtual PointElement
{
public:
 // Make sure that we call the constructor of the SolidQElement
 // Only the Intel compiler seems to need this!
 FaceGeometry() : PointElement() {}
};


//==============================================================
/// FaceGeometry of the 3D RefineableAnisotropicQPVDElement elements
//==============================================================
template<unsigned NNODE_1D>
class FaceGeometry<RefineableAnisotropicQPVDElement<3, NNODE_1D>>
  : public virtual SolidQElement<2, NNODE_1D>
{
public:
 // Make sure that we call the constructor of the SolidQElement
 // Only the Intel compiler seems to need this!
 FaceGeometry() : SolidQElement<2, NNODE_1D>() {}
};

//==============================================================
/// FaceGeometry of the FaceGeometry of the 3D RefineableAnisotropicQPVDElement
//==============================================================
template<unsigned NNODE_1D>
class FaceGeometry<FaceGeometry<RefineableAnisotropicQPVDElement<3, NNODE_1D>>>
  : public virtual SolidQElement<1, NNODE_1D>
{
public:
 // Make sure that we call the constructor of the SolidQElement
 // Only the Intel compiler seems to need this!
 FaceGeometry() : SolidQElement<1, NNODE_1D>() {}
};

//TODO

// Implement RefineableAnisotropicPVDEquationsWithPressure and face elements

// Implement RefineableAnisotropicQPVDElementWithPressure and face elements

// Implement RefineableAnisotropicQPVDElementWithContinuousPressure and face elements

} // End namespace

#endif 